stackchange --问答网站
wget 在下载时会以最后一个/后面的内容为文件命名，使用-o可以自定义文件名
wget -o wordpress.zip http://www.linuxde.net/download.aspx?id=1080
wget -c 断点续传

find . -name '*.tmp' -exec rm {} \;
从当前目录下查找以tmp为后缀的所有文件， -exec 是表示查找后紧接着执行的命令 因为rm不接受管道输入，
所以不能写成 find . -name ".ab" | rm 的形似，rm -f 就是删除文件的意思， {} 代表的是find 到的结果传给-exec参数
而使用-exec 参数必须用分号；结尾 但是在shell中不懂分号;是什么，所有要用转义符加分号，所以就有了\;

locate 与 find 不同: find 是去硬盘找，locate 只在 /var/lib/slocate 资料库中找。
locate passwd    查找系统中所有的passwd文件
updatedb         更新locate数据库

LSM树 和 TSM树简介：https://blog.csdn.net/changyanmanman/article/details/88344215
LSM tree 有效的主要原因是 -- 磁盘的随机读写操作慢，顺序读写操作快

Go 语言中方法和函数在形式上很像，它是作用在接收器（receiver）上的一个函数，接收器是某种类型的变量。因此方法是一种特殊类型的函数，
方法只是比函数多了一个接收器（receiver），当然在接口中定义的函数我们也称为方法（因为最终还是要通过绑定到类型来实现）。
正是因为有了接收器，方法才可以作用于接收器的类型（变量）上，类似于面向对象中类的方法可以作用于类属性上。

# docker 
对 Docker 项目来说，它最核心的原理实际上就是为待创建的用户进程：
1. 启用 Linux Namespace 配置；
2. 设置指定的 Cgroups 参数；
3. 切换进程的根目录（Change Root）。

** docker images **   列出本地主机上的镜像。
** docker search httpd **   搜索名为httpd的镜像
** docker pull httpd **     下载名为httpd的镜像
** docker image rm hello-world ** 删除hello-word镜像

** docker ps -a **       查看所有的容器
** docker start 123 **   启动id为123的容器
** docker stop 123 **    关闭id为123的容器
** docker rm -f 123 **   删除id为123的容器
** docker run  -it victoriametrics/victoria-metrics **    以命令行模式运行vm
** docker run  -d  victoriametrics/victoria-metrics **   后台运行
** docker run -p victoriametrics/victoria-metrics  **          容器内部端口随机映射到主机的端口
** docker run -p 8428:8428 victoriametrics/victoria-metrics ** 指定容器运行时映射到主机的端口
** docker run -p 127.0.0.1:8428:8428 victoriametrics/victoria-metrics **  指定容器绑定的网络地址（默认地址是0.0.0.0）
** docker run -itd --name centos-test centos /bin/bash ** 设置docker的名字为centos-test
** docker run -dit -p 8189:8189 -p 9090:9090 --name rundb centos /bin/bash ** 绑定多端口
> 使用docker指定宿主机与容器的端口后，就可以直接在宿主机的浏览器中访问 localhost:XX 就可以访问容器相关的服务
> 在使用0.0.0.0后，不在路由表中的地址都会进入容器，127.0.0.1 127.0.0.2 访问的结果一样
> 错误原因 -- rundb根本就没有正常启动
** docker cp qwerty.txt centos-test:/home/  **          将宿主机文件复制到docker容器
** docker cp centso-test:/home/qwerty.txt D:\temp  **   将docker容器文件复制到宿主机

docker镜像本质是一个文件，底层依赖于联合文件系统（UnionFS），UnionFS的最大特点是分层和联合加载
在加载时可以一次同时加载多个文件系统，通过联合加载把各层文件系统叠加，从外部只能看到一个文件系统，最终的文件系统要保护所有底层的文件和目录。
docker使用的是aufs

git下载后， 要先配置用户名和密码
git config --global user.name 'yejuns'
git config --global user.email '18756561540@163.com'
git config -l           列出所有配置
git init       初始化本地git项目
git remote add origin https://github.com/yejuns/myNote.git    将本地git项目与远程仓库的项目进行关联
git status        查看本地git项目内的变化
git add *
git commit -m 'first commit'   本地修改生效
git push -u origin master   向远端推送 

# 启动项文件位置
%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup

# 重装系统
现在从MSDN下载的iso文件不需要经过PE去重装系统，直接解压，执行setup.exe即可。
而Gho文件中是使用Ghost软件备份的硬盘分区或整个硬盘的所有文件信息，老毛桃、大白菜之类的工具在安装系统时，必须要有这样的文件，不然无法引导安装。

dmesg 可以对设备故障进行诊断，因为这个命令保存了设备的开机信息
${var:-string} 若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}
·· linux中的反向单引号，可以获取命令的输出内容，而不是命令执行成功与否的返回值，比如：
#!/bin/bash
check_results=`rpm -qa | grep "zlib"`
echo "command(rpm -qa) results are: $check_results"
if [[ $check_results =~ "zlib" ]] 
then 
    echo "package zlib has already installed. "
else 
    echo "This is going to install package zlib"
fi
使用rpm -qa命令查询某些rpm包是否安装，没有安装的话进行安装操作。

apt-get remove 会删除软件包而保留软件的配置文件
apt-get purge 会同时清除软件包和软件的配置文件
在遇到诸如 ubuntu apt-get install 时报错：Depends: ***(=某版本)but***(另一版本)is to be installed
这时候就把这个***给purge后再重新装就好， 列如
apt-get purge libcurl4
apt-get install curl

用js写异步，如果要并发异步获取两三个地址的数据，并且要在获取到数据之后，对这些数据一起进行利用的话，常规的写法是自己维护一个计数器
先定义一个 var count = 0，然后每次抓取成功以后，就 count++。如果你是要抓取三个源的数据，由于你根本不知道这些异步操作到底谁先完成，那么每次当抓取成功的时候，就判断一下 count === 3。当值为真时，使用另一个函数继续完成操作。
1、假设不使用计数器，抓取三个源的写法是
```
// 参考 jquery 的 $.get 的方法
$.get("http://data1_source", function (data1) {
  // something
  $.get("http://data2_source", function (data2) {
    // something
    $.get("http://data3_source", function (data3) {
      // something
      var html = fuck(data1, data2, data3);
      render(html);
    });
  });
});
```
先获取 data1，获取完成之后获取 data2，然后再获取 data3，然后 fuck 它们，进行输出。
但其实这三个源的数据，是可以并行去获取的，data2 的获取并不依赖 data1 的完成，data3 同理也不依赖 data2。
2、于是用计数器来写，会是这样
```
(function () {
  var count = 0;
  var result = {};

  $.get('http://data1_source', function (data) {
    result.data1 = data;
    count++;
    handle();
    });
  $.get('http://data2_source', function (data) {
    result.data2 = data;
    count++;
    handle();
    });
  $.get('http://data3_source', function (data) {
    result.data3 = data;
    count++;
    handle();
    });

  function handle() {
    if (count === 3) {
      var html = fuck(result.data1, result.data2, result.data3);
      render(html);
    }
  }
})();
```
3、使用eventproxy（就是一个高级的计数器，用于并发操作）
```
var ep = new eventproxy();
ep.all('data1_event', 'data2_event', 'data3_event', function (data1, data2, data3) {
  var html = fuck(data1, data2, data3);
  render(html);
});

$.get('http://data1_source', function (data) {
  ep.emit('data1_event', data);
  });

$.get('http://data2_source', function (data) {
  ep.emit('data2_event', data);
  });

$.get('http://data3_source', function (data) {
  ep.emit('data3_event', data);
  });
```
这一句，监听了三个事件，分别是 data1_event, data2_event, data3_event，每次当一个源的数据抓取完成时，就通过 ep.emit() 来告诉 ep 自己，某某事件已经完成了。
当三个事件未同时完成时，ep.emit() 调用之后不会做任何事；当三个事件都完成的时候，就会调用末尾的那个回调函数，来对它们进行统一处理。

node就是一个js的运行环境，就像JRE是Java的运行环境。它不是一门语言，也不是javascript的框架。用来开发服务端应用程序，web系统的语言依然是js，node只是这个应用程序运行的基础。
浏览器中的javascript只能读取文件，不能写文件；而且也不能去操作操作系统。（这些功能在客户端不是不能做，而是由于特殊的运行环境没法做）原因：
因为编写好的js代码最终会放在服务器上，但是不在服务器上执行的，而是通过服务器发送到浏览器端执行。如果浏览器访问一个网站，下载到本地的js却能修改我电脑的内容，那就非常危险。

js中，因为是弱引用（没有int、double、string等类型），因此很多变量都可以看出是一个对象，也可以对其添加元素。

java的多态性分为编译时多态性和运行时的多态性。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）
编译时多态（也可称之为静态多态性）和运行时多态的区别： 如果在编译时能够确定执行多态方法中的哪一个，称为编译时多态，否则称为运行时多态。

